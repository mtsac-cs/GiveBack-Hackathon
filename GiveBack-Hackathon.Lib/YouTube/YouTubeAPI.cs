// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using GiveBack_Hackathon.Lib.YouTube;
//
//    var youTubeApi = YouTubeApi.FromJson(jsonString);

namespace GiveBack_Hackathon.Lib.YouTube
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class YouTubeApi
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("etag")]
        public string Etag { get; set; }

        [JsonProperty("pageInfo")]
        public PageInfo PageInfo { get; set; }

        [JsonProperty("items")]
        public Item[] Items { get; set; }
    }

    public partial class Item
    {
        [JsonProperty("kind")]
        public string Kind { get; set; }

        [JsonProperty("etag")]
        public string Etag { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("snippet")]
        public Snippet Snippet { get; set; }

        [JsonProperty("status")]
        public Status Status { get; set; }

        [JsonProperty("contentDetails")]
        public ContentDetails ContentDetails { get; set; }

        [JsonProperty("player")]
        public Player Player { get; set; }
    }

    public partial class ContentDetails
    {
        [JsonProperty("itemCount")]
        public long ItemCount { get; set; }
    }

    public partial class Player
    {
        [JsonProperty("embedHtml")]
        public string EmbedHtml { get; set; }
    }

    public partial class Snippet
    {
        [JsonProperty("publishedAt")]
        public DateTimeOffset PublishedAt { get; set; }

        [JsonProperty("channelId")]
        public string ChannelId { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }

        [JsonProperty("thumbnails")]
        public Thumbnails Thumbnails { get; set; }

        [JsonProperty("channelTitle")]
        public string ChannelTitle { get; set; }

        [JsonProperty("localized")]
        public Localized Localized { get; set; }
    }

    public partial class Localized
    {
        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("description")]
        public string Description { get; set; }
    }

    public partial class Thumbnails
    {
        [JsonProperty("default")]
        public Default Default { get; set; }

        [JsonProperty("medium")]
        public Default Medium { get; set; }

        [JsonProperty("high")]
        public Default High { get; set; }

        [JsonProperty("standard")]
        public Default Standard { get; set; }
    }

    public partial class Default
    {
        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("width")]
        public long Width { get; set; }

        [JsonProperty("height")]
        public long Height { get; set; }
    }

    public partial class Status
    {
        [JsonProperty("privacyStatus")]
        public string PrivacyStatus { get; set; }
    }

    public partial class PageInfo
    {
        [JsonProperty("totalResults")]
        public long TotalResults { get; set; }

        [JsonProperty("resultsPerPage")]
        public long ResultsPerPage { get; set; }
    }

    public partial class YouTubeApi
    {
        public static YouTubeApi FromJson(string json) => JsonConvert.DeserializeObject<YouTubeApi>(json, GiveBack_Hackathon.Lib.YouTube.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this YouTubeApi self) => JsonConvert.SerializeObject(self, GiveBack_Hackathon.Lib.YouTube.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
